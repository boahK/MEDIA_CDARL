23-06-29 16:24:34.481 - INFO:   name: CDARL_test
  phase: test
  gpu_ids: [0]
  display_port: 8097
  path:[
    log: experiments/CDARL_test_230629_162434/logs
    tb_logger: experiments/CDARL_test_230629_162434/tb_logger
    results: experiments/CDARL_test_230629_162434/results
    checkpoint: experiments/CDARL_test_230629_162434/checkpoint
    resume_state: experiments/pretrained
    experiments_root: experiments/CDARL_test_230629_162434
  ]
  datasets:[
    train:[
      name: XCAD
      dataroot: ./data/Dataset_XCAD/
      batch_size: 1
      centered: True
      num_workers: 8
      use_shuffle: True
    ]
    test:[
      name: XCAD
      dataroot: ./data/Dataset_XCAD/
      data_len: 3
    ]
  ]
  model:[
    finetune_norm: False
    unet:[
      in_channel: 1
      out_channel: 1
      inner_channel: 64
      channel_multiplier: [1, 1, 2, 2, 4, 4]
      attn_res: [16]
      res_blocks: 2
      dropout: 0
    ]
    beta_schedule:[
      train:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
      test:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
    ]
    diffusion:[
      image_size: 256
      channels: 1
      conditional: False
    ]
  ]
  train:[
    n_epoch: 150
    val_freq: 5
    save_checkpoint_epoch: 100
    print_freq: 1
    optimizer:[
      type: adam
      lr: 1e-05
    ]
    ema_scheduler:[
      step_start_ema: 5000
      update_ema_every: 1
      ema_decay: 0.9999
    ]
  ]
  distributed: False

23-06-29 16:24:34.537 - INFO: Dataset [XCADDataset - XCAD] is created.
23-06-29 16:24:34.541 - INFO: Dataset [XCADDataset - XCAD] is created.
23-06-29 16:24:34.543 - INFO: Dataset [XCADDataset - XCAD] is created.
23-06-29 16:24:34.543 - INFO: Initial Dataset Finished
23-06-29 16:24:37.152 - INFO: Loading pretrained model for G [experiments/pretrained] ...
23-06-29 16:24:38.839 - INFO: Network structure: GaussianDiffusion, with parameters: 35,369,026
23-06-29 16:24:38.839 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (time_mlp): Sequential(
      (0): TimeEmbedding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (downs): ModuleList(
      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (3): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (6): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (9): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (11): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (12): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (15): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (16): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (17): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (12): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (15): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (16): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (17): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (18): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (19): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (20): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (21): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (22): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (segment_fn): SPADEGenerator(
    (model): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(2, 64, kernel_size=(7, 7), stride=(1, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (3): ReLU(inplace=True)
      (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (5): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (6): ReLU(inplace=True)
      (7): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (8): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (9): ReLU(inplace=True)
    )
    (G_middle_0): SPADEResnetBlock(
      (conv_0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (norm_0): SPADE(
        (param_free_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_1): SPADE(
        (param_free_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (G_middle_1): SPADEResnetBlock(
      (conv_0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (norm_0): SPADE(
        (param_free_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_1): SPADE(
        (param_free_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (up): Upsample(scale_factor=2.0, mode=nearest)
    (up_0): SPADEResnetBlock(
      (conv_0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_s): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (norm_0): SPADE(
        (param_free_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_1): SPADE(
        (param_free_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_s): SPADE(
        (param_free_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (up_1): SPADEResnetBlock(
      (conv_0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_s): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (norm_0): SPADE(
        (param_free_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_1): SPADE(
        (param_free_norm): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_s): SPADE(
        (param_free_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (param_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (mlp_shared): Sequential(
          (0): Conv2d(2, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (conv_img): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(64, 1, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (loss_func): MSELoss()
  (loss_gan): GANLoss(
    (loss): MSELoss()
  )
  (loss_cyc): L1Loss()
)
23-06-29 16:24:38.842 - INFO: Model [CDARL] is created.
23-06-29 16:24:38.842 - INFO: Initial Model Finished
23-06-29 16:24:38.842 - INFO: Resuming training from epoch: 0, iter: 0.
23-06-29 16:24:38.843 - INFO: Begin Model Evaluation.
